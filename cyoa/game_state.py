# Generated by assistant
# Timestamp: 2024-11-15T20:33:31
# Language: python
# File: game_state.py

from typing import Dict, List, Set, Union
from dataclasses import dataclass, asdict
import json
from pathlib import Path

@dataclass
class GameState:
    """Manages the game state for the CYOA game"""
    current_location: str = "start"
    inventory: List[str] = None
    visited_locations: Set[str] = None
    choices_made: List[str] = None

    def __post_init__(self):
        """Initialize mutable defaults"""
        if self.inventory is None:
            self.inventory = []
        if self.visited_locations is None:
            self.visited_locations = set()
        if self.choices_made is None:
            self.choices_made = []

    def move_to(self, new_location: str) -> None:
        """Updates the player's current location and tracks visited locations."""
        self.current_location = new_location
        self.visited_locations.add(new_location)
        self.choices_made.append(new_location)

    def add_to_inventory(self, item: str) -> None:
        """Adds an item to the player's inventory."""
        self.inventory.append(item)

    def remove_from_inventory(self, item: str) -> bool:
        """Removes an item from the player's inventory if it exists."""
        try:
            self.inventory.remove(item)
            return True
        except ValueError:
            return False

    def get_state(self) -> Dict[str, Union[str, List[str], List[str]]]:
        """Returns the current game state as a dictionary."""
        return {
            "current_location": self.current_location,
            "inventory": self.inventory,
            "visited_locations": list(self.visited_locations),
            "choices_made": self.choices_made
        }

    def save_state(self, save_file: Path) -> bool:
        """Saves the current state to a file."""
        try:
            with open(save_file, 'w') as f:
                json.dump(self.get_state(), f, indent=2)
            return True
        except Exception:
            return False

    @classmethod
    def load_state(cls, save_file: Path) -> 'GameState':
        """Loads a saved state from a file."""
        try:
            with open(save_file, 'r') as f:
                data = json.load(f)
                data['visited_locations'] = set(data['visited_locations'])
                return cls(**data)
        except Exception:
            return cls()